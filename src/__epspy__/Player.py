## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Helpers;
import Helpers
# (Line 2) import Map;
import Map
# (Line 3) import Bomb;
import Bomb
# (Line 5) const scale						= Helpers.scale;
scale = _CGFW(lambda: [Helpers.scale], 1)[0]
# (Line 6) const Computer		 			= Helpers.Computer;
Computer = _CGFW(lambda: [Helpers.Computer], 1)[0]
# (Line 7) const UnitID_Civilian 			= Helpers.UnitID_Player[0];
UnitID_Civilian = _CGFW(lambda: [Helpers.UnitID_Player[0]], 1)[0]
# (Line 8) const UnitID_Tank 				= Helpers.UnitID_Player[2];
UnitID_Tank = _CGFW(lambda: [Helpers.UnitID_Player[2]], 1)[0]
# (Line 9) const UnitID_Goliath 			= Helpers.UnitID_Player[1];
UnitID_Goliath = _CGFW(lambda: [Helpers.UnitID_Player[1]], 1)[0]
# (Line 10) const UnitID_Bomb				= Helpers.UnitID_Bomb;
UnitID_Bomb = _CGFW(lambda: [Helpers.UnitID_Bomb], 1)[0]
# (Line 11) const UnitID_Fire				= Helpers.UnitID_Fire;
UnitID_Fire = _CGFW(lambda: [Helpers.UnitID_Fire], 1)[0]
# (Line 12) const EPD_Players	 			= EUDArray(6);
EPD_Players = _CGFW(lambda: [EUDArray(6)], 1)[0]
# (Line 13) const MaxRange					= 5;
MaxRange = _CGFW(lambda: [5], 1)[0]
# (Line 14) const MaxBomb					= 8;
MaxBomb = _CGFW(lambda: [8], 1)[0]
# (Line 15) const PlayerSpeed				= EUDArray(6);
PlayerSpeed = _CGFW(lambda: [EUDArray(6)], 1)[0]
# (Line 17) const loc0 		= $L('loc0');
loc0 = _CGFW(lambda: [GetLocationIndex('loc0')], 1)[0]
# (Line 18) const loc 		= $L('loc');
loc = _CGFW(lambda: [GetLocationIndex('loc')], 1)[0]
# (Line 19) const loc_p1 	= $L('p1');
loc_p1 = _CGFW(lambda: [GetLocationIndex('p1')], 1)[0]
# (Line 20) const loc_p2 	= $L('p2');
loc_p2 = _CGFW(lambda: [GetLocationIndex('p2')], 1)[0]
# (Line 21) const loc_p3 	= $L('p3');
loc_p3 = _CGFW(lambda: [GetLocationIndex('p3')], 1)[0]
# (Line 22) const loc_p4 	= $L('p4');
loc_p4 = _CGFW(lambda: [GetLocationIndex('p4')], 1)[0]
# (Line 23) const loc_p5 	= $L('p5');
loc_p5 = _CGFW(lambda: [GetLocationIndex('p5')], 1)[0]
# (Line 24) const loc_p6 	= $L('p6');
loc_p6 = _CGFW(lambda: [GetLocationIndex('p6')], 1)[0]
# (Line 26) const loclist	= [loc_p1, loc_p2, loc_p3, loc_p4, loc_p5, loc_p6];
loclist = _CGFW(lambda: [_ARR(FlattenList([loc_p1, loc_p2, loc_p3, loc_p4, loc_p5, loc_p6]))], 1)[0]
# (Line 30) function SetPlayerEpd(player)
# (Line 31) {
@EUDFunc
def SetPlayerEpd(player):
    # (Line 32) EPD_Players[player] = epdread_epd(EPD(0x628438));
    _ARRW(EPD_Players, player) << (f_epdread_epd(EPD(0x628438)))
    # (Line 33) }
    # (Line 35) function GetPlayerEpd(player)

# (Line 36) {
@EUDFunc
def GetPlayerEpd(player):
    # (Line 37) return EPD_Players[player];
    EUDReturn(EPD_Players[player])
    # (Line 38) }
    # (Line 40) function GetCurrentBN(player);

# (Line 41) function GetBombNumber(player);
# (Line 42) function GetBombRange(player);
# (Line 43) function SetBombNumber(player, number);
# (Line 44) function SetBombRange(player, number);
# (Line 45) function InitPlayer(player)
# (Line 46) {
@EUDFunc
def InitPlayer(player):
    # (Line 47) SetPlayerEpd(player);
    SetPlayerEpd(player)
    # (Line 48) CreateUnit(1, UnitID_Civilian, loclist[player]+1, player);
    DoActions(CreateUnit(1, UnitID_Civilian, loclist[player] + 1, player))
    # (Line 49) SetBombNumber(player, 1);
    SetBombNumber(player, 1)
    # (Line 50) SetBombRange(player, 1);
    SetBombRange(player, 1)
    # (Line 51) PlayerSpeed[player] = 1000;
    _ARRW(PlayerSpeed, player) << (1000)
    # (Line 52) if(Helpers.GetDeath(player, 216) == 0)
    if EUDIf()(Helpers.GetDeath(player, 216) == 0):
        # (Line 53) {
        # (Line 54) SetDeaths(player, SetTo, 1, 216);
        DoActions(SetDeaths(player, SetTo, 1, 216))
        # (Line 55) CenterView(loclist[player]+1);
        DoActions(CenterView(loclist[player] + 1))
        # (Line 56) }
        # (Line 57) }
    EUDEndIf()
    # (Line 58) function GetItem(player);

# (Line 59) function FollowLocation(player)
# (Line 60) {
@EUDFunc
def FollowLocation(player):
    # (Line 61) if(Command(player, AtLeast, 1, '(men)'))
    if EUDIf()(Command(player, AtLeast, 1, '(men)')):
        # (Line 62) MoveLocation(loclist[player]+1, '(men)', player, '20x13');
        DoActions(MoveLocation(loclist[player] + 1, '(men)', player, '20x13'))
        # (Line 63) }
    EUDEndIf()
    # (Line 64) function ItemCollect(player)

# (Line 65) {
@EUDFunc
def ItemCollect(player):
    # (Line 66) const item = GetItem(player);
    item = GetItem(player)
    # (Line 67) if(item != 0)
    if EUDIf()(item == 0, neg=True):
        # (Line 68) RemoveUnitAt(1, item, loclist[player]+1, Computer);
        DoActions(RemoveUnitAt(1, item, loclist[player] + 1, Computer))
        # (Line 69) }
    EUDEndIf()
    # (Line 71) function PlaceBomb(unitEpd)

# (Line 72) {
@EUDFunc
def PlaceBomb(unitEpd):
    # (Line 73) const player = dwbreak(dwread_epd(unitEpd + 0x4C / 4))[[2]];
    player = f_dwbreak(f_dwread_epd(unitEpd + 0x4C // 4))[2]
    # (Line 75) if(Helpers.GetBuildQueue1(unitEpd) == $U('Zerg Mutalisk'))
    if EUDIf()(Helpers.GetBuildQueue1(unitEpd) == EncodeUnit('Zerg Mutalisk')):
        # (Line 76) {
        # (Line 77) if(GetBombNumber(player) > GetCurrentBN(player))
        if EUDIf()(GetBombNumber(player) <= GetCurrentBN(player), neg=True):
            # (Line 78) {
            # (Line 79) const x, y = Map.GetTileIndex(unitEpd);
            x, y = List2Assignable([Map.GetTileIndex(unitEpd)])
            # (Line 80) const x2, y2 = Map.GetTileXY(x, y);
            x2, y2 = List2Assignable([Map.GetTileXY(x, y)])
            # (Line 81) Helpers.EUDSetLocation(loc, x2, y2);
            Helpers.EUDSetLocation(loc, x2, y2)
            # (Line 83) if(Map.GetMapXY(x,y) == 0)
            if EUDIf()(Map.GetMapXY(x, y) == 0):
                # (Line 84) {
                # (Line 85) const unitEpd = epdread_epd(EPD(0x628438));
                unitEpd_1 = f_epdread_epd(EPD(0x628438))
                # (Line 86) CreateUnit(1, UnitID_Bomb, loc +1, player);
                DoActions(CreateUnit(1, UnitID_Bomb, loc + 1, player))
                # (Line 87) Bomb.NewBomb(unitEpd);
                Bomb.NewBomb(unitEpd_1)
                # (Line 88) SetMemoryEPD(unitEpd + 0x114/4, SetTo, 10);
                DoActions(SetMemoryEPD(unitEpd_1 + 0x114 // 4, SetTo, 10))
                # (Line 89) }
                # (Line 90) }
            EUDEndIf()
            # (Line 92) Helpers.ResetBuildQueue(unitEpd);
        EUDEndIf()
        Helpers.ResetBuildQueue(unitEpd)
        # (Line 93) }
        # (Line 94) }
    EUDEndIf()
    # (Line 95) function GetBombRange(player)

# (Line 96) {
@EUDFunc
def GetBombRange(player):
    # (Line 97) for(var i = 0; i<12; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 12, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 98) if(Accumulate(player, Exactly, i, Gas))
        if EUDIf()(Accumulate(player, Exactly, i, Gas)):
            # (Line 99) return i;
            EUDReturn(i)
            # (Line 100) }
        EUDEndIf()
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 101) function SetBombRange(player, number)

# (Line 102) {
@EUDFunc
def SetBombRange(player, number):
    # (Line 103) SetResources(player, SetTo, number, Gas);
    DoActions(SetResources(player, SetTo, number, Gas))
    # (Line 104) }
    # (Line 105) function GetCurrentBN(player)

# (Line 106) {
@EUDFunc
def GetCurrentBN(player):
    # (Line 107) for(var i = 0; i<12; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 12, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 108) if(Command(player, Exactly, i, UnitID_Bomb))
        if EUDIf()(Command(player, Exactly, i, UnitID_Bomb)):
            # (Line 109) return i;
            EUDReturn(i)
            # (Line 111) }
        EUDEndIf()
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 112) function GetBombNumber(player)

# (Line 113) {
@EUDFunc
def GetBombNumber(player):
    # (Line 114) for(var i = 0; i<12; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 12, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 115) if(Accumulate(player, Exactly, i, Ore))
        if EUDIf()(Accumulate(player, Exactly, i, Ore)):
            # (Line 116) return i;
            EUDReturn(i)
            # (Line 117) }
        EUDEndIf()
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 118) function SetBombNumber(player, number)

# (Line 119) {
@EUDFunc
def SetBombNumber(player, number):
    # (Line 120) SetResources(player, SetTo, number, Ore);
    DoActions(SetResources(player, SetTo, number, Ore))
    # (Line 121) }
    # (Line 123) function GetItem(player)

# (Line 124) {
@EUDFunc
def GetItem(player):
    # (Line 125) for(var i=0; i<6; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 6, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 126) {
        # (Line 127) const item = Helpers.ItemList[i];
        item = Helpers.ItemList[i]
        # (Line 128) if(Bring(Computer, AtLeast, 1, item, loclist[player]+1))
        if EUDIf()(Bring(Computer, AtLeast, 1, item, loclist[player] + 1)):
            # (Line 129) {
            # (Line 131) if(item == Helpers.Item_rangeUp)
            if EUDIf()(item == Helpers.Item_rangeUp):
                # (Line 132) {
                # (Line 133) const bombRange = GetBombRange(player);
                bombRange = GetBombRange(player)
                # (Line 134) if(bombRange < MaxRange)
                if EUDIf()(bombRange >= MaxRange, neg=True):
                    # (Line 135) {
                    # (Line 136) DisplayText("\x07[ Range + ]");
                    DoActions(DisplayText("\x07[ Range + ]"))
                    # (Line 137) SetBombRange(player, bombRange+1);
                    SetBombRange(player, bombRange + 1)
                    # (Line 138) return item;
                    EUDReturn(item)
                    # (Line 139) }
                    # (Line 140) return 0;
                EUDEndIf()
                EUDReturn(0)
                # (Line 141) }
                # (Line 143) if(item == Helpers.Item_speedUp)
            EUDEndIf()
            if EUDIf()(item == Helpers.Item_speedUp):
                # (Line 144) {
                # (Line 145) if(MemoryEPD(GetPlayerEpd(player) + 0x034 /4, AtMost, 1900) || PlayerSpeed[player] > 1900)
                if EUDIf()(EUDSCOr()(MemoryEPD(GetPlayerEpd(player) + 0x034 // 4, AtMost, 1900))(PlayerSpeed[player] <= 1900, neg=True)()):
                    # (Line 146) {
                    # (Line 147) DisplayText("\x07[ Speed + ]");
                    DoActions(DisplayText("\x07[ Speed + ]"))
                    # (Line 148) SetMemoryEPD(GetPlayerEpd(player) + 0x034 /4, Add, 100);
                    DoActions(SetMemoryEPD(GetPlayerEpd(player) + 0x034 // 4, Add, 100))
                    # (Line 149) PlayerSpeed[player] = PlayerSpeed[player] + 100;
                    _ARRW(PlayerSpeed, player) << (PlayerSpeed[player] + 100)
                    # (Line 150) return item;
                    EUDReturn(item)
                    # (Line 151) }
                    # (Line 152) return 0;
                EUDEndIf()
                EUDReturn(0)
                # (Line 153) }
                # (Line 155) if(item == Helpers.Item_bombNUp)
            EUDEndIf()
            if EUDIf()(item == Helpers.Item_bombNUp):
                # (Line 156) {
                # (Line 157) const bombNumber = GetBombNumber(player);
                bombNumber = GetBombNumber(player)
                # (Line 158) if(bombNumber < MaxBomb)
                if EUDIf()(bombNumber >= MaxBomb, neg=True):
                    # (Line 159) {
                    # (Line 160) DisplayText("\x07[ Bomb + ]");
                    DoActions(DisplayText("\x07[ Bomb + ]"))
                    # (Line 161) SetBombNumber(player, bombNumber+1);
                    SetBombNumber(player, bombNumber + 1)
                    # (Line 162) return item;
                    EUDReturn(item)
                    # (Line 163) }
                    # (Line 164) return 0;
                EUDEndIf()
                EUDReturn(0)
                # (Line 165) }
                # (Line 167) if(item == Helpers.Item_rangeMax)
            EUDEndIf()
            if EUDIf()(item == Helpers.Item_rangeMax):
                # (Line 168) {
                # (Line 169) const bombRange = GetBombRange(player);
                bombRange = GetBombRange(player)
                # (Line 170) if(bombRange < MaxRange)
                if EUDIf()(bombRange >= MaxRange, neg=True):
                    # (Line 171) {
                    # (Line 172) DisplayText("\x07[ Range ++ ]");
                    DoActions(DisplayText("\x07[ Range ++ ]"))
                    # (Line 173) SetBombRange(player, bombRange+2);
                    SetBombRange(player, bombRange + 2)
                    # (Line 174) return item;
                    EUDReturn(item)
                    # (Line 175) }
                    # (Line 176) return 0;
                EUDEndIf()
                EUDReturn(0)
                # (Line 177) }
                # (Line 179) if(item == Helpers.Item_rideTank)
            EUDEndIf()
            if EUDIf()(item == Helpers.Item_rideTank):
                # (Line 180) {
                # (Line 181) if(Command(player, Exactly, 1, UnitID_Civilian))
                if EUDIf()(Command(player, Exactly, 1, UnitID_Civilian)):
                    # (Line 182) {
                    # (Line 183) PlayerSpeed[player] = dwread_epd(GetPlayerEpd(player) + 0x034 /4);
                    _ARRW(PlayerSpeed, player) << (f_dwread_epd(GetPlayerEpd(player) + 0x034 // 4))
                    # (Line 184) RemoveUnit(UnitID_Civilian, player);
                    DoActions(RemoveUnit(UnitID_Civilian, player))
                    # (Line 185) SetPlayerEpd(player);
                    SetPlayerEpd(player)
                    # (Line 186) const chance = Helpers.GetRandom(0,2);
                    chance = Helpers.GetRandom(0, 2)
                    # (Line 187) if(chance == 1)
                    if EUDIf()(chance == 1):
                        # (Line 188) {
                        # (Line 189) CreateUnit(1, UnitID_Tank, loclist[player]+1, player);
                        DoActions(CreateUnit(1, UnitID_Tank, loclist[player] + 1, player))
                        # (Line 190) SetDeaths(player, SetTo, 1, UnitID_Tank);
                        DoActions(SetDeaths(player, SetTo, 1, UnitID_Tank))
                        # (Line 191) }
                        # (Line 192) else
                        # (Line 193) {
                    if EUDElse()():
                        # (Line 194) CreateUnit(1, UnitID_Goliath, loclist[player]+1, player);
                        DoActions(CreateUnit(1, UnitID_Goliath, loclist[player] + 1, player))
                        # (Line 195) SetDeaths(player, SetTo, 1, UnitID_Goliath);
                        DoActions(SetDeaths(player, SetTo, 1, UnitID_Goliath))
                        # (Line 196) }
                        # (Line 198) return item;
                    EUDEndIf()
                    EUDReturn(item)
                    # (Line 199) }
                    # (Line 200) return 0;
                EUDEndIf()
                EUDReturn(0)
                # (Line 202) }
                # (Line 203) if(item == Helpers.Item_rideHide)
            EUDEndIf()
            if EUDIf()(item == Helpers.Item_rideHide):
                # (Line 204) {
                # (Line 205) if(1)
                if EUDIf()(1):
                    # (Line 206) {
                    # (Line 210) DisplayText("\x07똥을 밟았다.");
                    DoActions(DisplayText("\x07똥을 밟았다."))
                    # (Line 211) return item;
                    EUDReturn(item)
                    # (Line 212) }
                    # (Line 213) return 0;
                EUDEndIf()
                EUDReturn(0)
                # (Line 215) }
                # (Line 216) }
            EUDEndIf()
            # (Line 217) }
        EUDEndIf()
        # (Line 218) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 220) function OffRide(player)

# (Line 221) {
@EUDFunc
def OffRide(player):
    # (Line 222) if(Command(player, Exactly, 0, '(men)'))
    if EUDIf()(Command(player, Exactly, 0, '(men)')):
        # (Line 223) {
        # (Line 224) if(Helpers.GetDeath(player, UnitID_Tank) > 0 || Helpers.GetDeath(player, UnitID_Goliath) > 0)
        if EUDIf()(EUDSCOr()(Helpers.GetDeath(player, UnitID_Tank) <= 0, neg=True)(Helpers.GetDeath(player, UnitID_Goliath) <= 0, neg=True)()):
            # (Line 225) {
            # (Line 226) if(Bomb.boom == 0)
            if EUDIf()(Bomb.boom == 0):
                # (Line 227) {
                # (Line 228) SetPlayerEpd(player);
                SetPlayerEpd(player)
                # (Line 229) CreateUnit(1, UnitID_Civilian, loclist[player]+1, player);
                DoActions(CreateUnit(1, UnitID_Civilian, loclist[player] + 1, player))
                # (Line 230) SetMemoryEPD(GetPlayerEpd(player) + 0x034 /4, SetTo, PlayerSpeed[player]);
                DoActions(SetMemoryEPD(GetPlayerEpd(player) + 0x034 // 4, SetTo, PlayerSpeed[player]))
                # (Line 231) SetDeaths(player, SetTo, 0, UnitID_Tank);
                DoActions(SetDeaths(player, SetTo, 0, UnitID_Tank))
                # (Line 232) SetDeaths(player, SetTo, 0, UnitID_Goliath);
                DoActions(SetDeaths(player, SetTo, 0, UnitID_Goliath))
                # (Line 233) }
                # (Line 234) }
            EUDEndIf()
            # (Line 235) }
        EUDEndIf()
        # (Line 236) }
    EUDEndIf()
