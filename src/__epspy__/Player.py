## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Header;
import Header
# (Line 2) import Helpers;
import Helpers
# (Line 3) import Map;
import Map
# (Line 4) import Bomb;
import Bomb
# (Line 6) const scale						= Map.scale;
scale = _CGFW(lambda: [Map.scale], 1)[0]
# (Line 8) const Computer		 			= Header.Computer;
Computer = _CGFW(lambda: [Header.Computer], 1)[0]
# (Line 9) const UnitID_Civilian 			= Header.UnitID_Player[0];
UnitID_Civilian = _CGFW(lambda: [Header.UnitID_Player[0]], 1)[0]
# (Line 10) const UnitID_Tank 				= Header.UnitID_Player[2];
UnitID_Tank = _CGFW(lambda: [Header.UnitID_Player[2]], 1)[0]
# (Line 11) const UnitID_Goliath 			= Header.UnitID_Player[1];
UnitID_Goliath = _CGFW(lambda: [Header.UnitID_Player[1]], 1)[0]
# (Line 12) const UnitID_Bomb				= Header.UnitID_Bomb;
UnitID_Bomb = _CGFW(lambda: [Header.UnitID_Bomb], 1)[0]
# (Line 13) const UnitID_Fire				= Header.UnitID_Fire;
UnitID_Fire = _CGFW(lambda: [Header.UnitID_Fire], 1)[0]
# (Line 15) const ItemList					= Header.ItemList;
ItemList = _CGFW(lambda: [Header.ItemList], 1)[0]
# (Line 16) const Item_rangeUp				= Header.Item_rangeUp;
Item_rangeUp = _CGFW(lambda: [Header.Item_rangeUp], 1)[0]
# (Line 17) const Item_speedUp				= Header.Item_speedUp;
Item_speedUp = _CGFW(lambda: [Header.Item_speedUp], 1)[0]
# (Line 18) const Item_bombNUp				= Header.Item_bombNUp;
Item_bombNUp = _CGFW(lambda: [Header.Item_bombNUp], 1)[0]
# (Line 19) const Item_rangeMax				= Header.Item_rangeMax;
Item_rangeMax = _CGFW(lambda: [Header.Item_rangeMax], 1)[0]
# (Line 20) const Item_rideTank				= Header.Item_rideTank;
Item_rideTank = _CGFW(lambda: [Header.Item_rideTank], 1)[0]
# (Line 21) const Item_rideHide				= Header.Item_rideHide;
Item_rideHide = _CGFW(lambda: [Header.Item_rideHide], 1)[0]
# (Line 23) const EPD_Players	 			= EUDArray(6);
EPD_Players = _CGFW(lambda: [EUDArray(6)], 1)[0]
# (Line 24) const MaxRange					= 5;
MaxRange = _CGFW(lambda: [5], 1)[0]
# (Line 25) const MaxBomb					= 8;
MaxBomb = _CGFW(lambda: [8], 1)[0]
# (Line 26) const PlayerSpeed				= EUDArray(6);
PlayerSpeed = _CGFW(lambda: [EUDArray(6)], 1)[0]
# (Line 28) const loc0 		= $L('loc0');
loc0 = _CGFW(lambda: [GetLocationIndex('loc0')], 1)[0]
# (Line 29) const loc 		= $L('loc');
loc = _CGFW(lambda: [GetLocationIndex('loc')], 1)[0]
# (Line 30) const loc_p1 	= $L('p1');
loc_p1 = _CGFW(lambda: [GetLocationIndex('p1')], 1)[0]
# (Line 31) const loc_p2 	= $L('p2');
loc_p2 = _CGFW(lambda: [GetLocationIndex('p2')], 1)[0]
# (Line 32) const loc_p3 	= $L('p3');
loc_p3 = _CGFW(lambda: [GetLocationIndex('p3')], 1)[0]
# (Line 33) const loc_p4 	= $L('p4');
loc_p4 = _CGFW(lambda: [GetLocationIndex('p4')], 1)[0]
# (Line 34) const loc_p5 	= $L('p5');
loc_p5 = _CGFW(lambda: [GetLocationIndex('p5')], 1)[0]
# (Line 35) const loc_p6 	= $L('p6');
loc_p6 = _CGFW(lambda: [GetLocationIndex('p6')], 1)[0]
# (Line 37) const loclist	= [loc_p1, loc_p2, loc_p3, loc_p4, loc_p5, loc_p6];
loclist = _CGFW(lambda: [_ARR(FlattenList([loc_p1, loc_p2, loc_p3, loc_p4, loc_p5, loc_p6]))], 1)[0]
# (Line 38) const locBC		= $L('BC');
locBC = _CGFW(lambda: [GetLocationIndex('BC')], 1)[0]
# (Line 40) function SetBombWayBlock(unitEpd, bool);
# (Line 41) function IsBombWayBlocked(unitEpd);
# (Line 42) function SetRangeAtBomb(unitEpd, range);
# (Line 43) function GetRangeAtBomb(unitEpd);
# (Line 44) function SetBombTimer(unitEpd, time);
# (Line 45) function GetCurrentBN(player);
# (Line 46) function GetBombNumber(player);
# (Line 47) function GetBombRange(player);
# (Line 48) function SetBombNumber(player, number);
# (Line 49) function SetBombRange(player, number);
# (Line 50) function GetItem(player);
# (Line 53) function SetPlayerEpd(player)
# (Line 54) {
@EUDFunc
def SetPlayerEpd(player):
    # (Line 55) EPD_Players[player] = epdread_epd(EPD(0x628438));
    _ARRW(EPD_Players, player) << (f_epdread_epd(EPD(0x628438)))
    # (Line 56) }
    # (Line 58) function GetPlayerEpd(player)

# (Line 59) {
@EUDFunc
def GetPlayerEpd(player):
    # (Line 60) return EPD_Players[player];
    EUDReturn(EPD_Players[player])
    # (Line 61) }
    # (Line 63) function InitPlayerLocation(player)

# (Line 64) {
@EUDFunc
def InitPlayerLocation(player):
    # (Line 65) var x, y;
    x, y = EUDCreateVariables(2)
    # (Line 66) if(player == 0) { x=1; y=1; }
    if EUDIf()(player == 0):
        x << (1)
        y << (1)
        # (Line 67) if(player == 1) { x=18; y=1; }
    EUDEndIf()
    if EUDIf()(player == 1):
        x << (18)
        y << (1)
        # (Line 68) if(player == 2) { x=1; y=11; }
    EUDEndIf()
    if EUDIf()(player == 2):
        x << (1)
        y << (11)
        # (Line 69) if(player == 3) { x=18; y=11; }
    EUDEndIf()
    if EUDIf()(player == 3):
        x << (18)
        y << (11)
        # (Line 70) if(player == 4) { x=1; y=6; }
    EUDEndIf()
    if EUDIf()(player == 4):
        x << (1)
        y << (6)
        # (Line 71) if(player == 5) { x=18; y=6; }
    EUDEndIf()
    if EUDIf()(player == 5):
        x << (18)
        y << (6)
        # (Line 73) const x2, y2 = Map.GetTileXY(x, y);
    EUDEndIf()
    x2, y2 = List2Assignable([Map.GetTileXY(x, y)])
    # (Line 74) Helpers.EUDSetLocation(loclist[player], x2, y2);
    Helpers.EUDSetLocation(loclist[player], x2, y2)
    # (Line 75) }
    # (Line 76) function InitPlayer(player)

# (Line 77) {
@EUDFunc
def InitPlayer(player):
    # (Line 78) SetPlayerEpd(player);
    SetPlayerEpd(player)
    # (Line 79) InitPlayerLocation(player);
    InitPlayerLocation(player)
    # (Line 80) CreateUnit(1, UnitID_Civilian, loclist[player]+1, player);
    DoActions(CreateUnit(1, UnitID_Civilian, loclist[player] + 1, player))
    # (Line 81) SetBombNumber(player, 1);
    SetBombNumber(player, 1)
    # (Line 82) SetBombRange(player, 1);
    SetBombRange(player, 1)
    # (Line 83) PlayerSpeed[player] = 1000;
    _ARRW(PlayerSpeed, player) << (1000)
    # (Line 84) if(Helpers.GetDeath(player, 216) == 0)
    if EUDIf()(Helpers.GetDeath(player, 216) == 0):
        # (Line 85) {
        # (Line 86) SetDeaths(player, SetTo, 1, 216);
        DoActions(SetDeaths(player, SetTo, 1, 216))
        # (Line 87) CenterView(loclist[player]+1);
        DoActions(CenterView(loclist[player] + 1))
        # (Line 88) }
        # (Line 89) }
    EUDEndIf()
    # (Line 90) function FollowLocation(player)

# (Line 91) {
@EUDFunc
def FollowLocation(player):
    # (Line 92) if(Command(player, AtLeast, 1, '(men)'))
    if EUDIf()(Command(player, AtLeast, 1, '(men)')):
        # (Line 93) MoveLocation(loclist[player]+1, '(men)', player, '20x13');
        DoActions(MoveLocation(loclist[player] + 1, '(men)', player, '20x13'))
        # (Line 94) }
    EUDEndIf()
    # (Line 95) function ItemCollect(player)

# (Line 96) {
@EUDFunc
def ItemCollect(player):
    # (Line 97) const item = GetItem(player);
    item = GetItem(player)
    # (Line 98) if(item != 0)
    if EUDIf()(item == 0, neg=True):
        # (Line 99) RemoveUnitAt(1, item, loclist[player]+1, Computer);
        DoActions(RemoveUnitAt(1, item, loclist[player] + 1, Computer))
        # (Line 100) }
    EUDEndIf()
    # (Line 102) function PlaceBomb(unitEpd)

# (Line 103) {
@EUDFunc
def PlaceBomb(unitEpd):
    # (Line 104) const player = Helpers.GetPlayerID(unitEpd);
    player = Helpers.GetPlayerID(unitEpd)
    # (Line 106) if(Helpers.GetBuildQueue1(unitEpd) == $U('Zerg Mutalisk'))
    if EUDIf()(Helpers.GetBuildQueue1(unitEpd) == EncodeUnit('Zerg Mutalisk')):
        # (Line 107) {
        # (Line 108) if(GetBombNumber(player) > GetCurrentBN(player))
        if EUDIf()(GetBombNumber(player) <= GetCurrentBN(player), neg=True):
            # (Line 109) {
            # (Line 110) const x, y = Map.GetTileIndex(unitEpd);
            x, y = List2Assignable([Map.GetTileIndex(unitEpd)])
            # (Line 111) const x2, y2 = Map.GetTileXY(x, y);
            x2, y2 = List2Assignable([Map.GetTileXY(x, y)])
            # (Line 112) Helpers.EUDSetLocation(loc, x2, y2);
            Helpers.EUDSetLocation(loc, x2, y2)
            # (Line 114) if(Map.GetMapXY(x,y) == 0)
            if EUDIf()(Map.GetMapXY(x, y) == 0):
                # (Line 115) {
                # (Line 116) const unitEpd = epdread_epd(EPD(0x628438));
                unitEpd_1 = f_epdread_epd(EPD(0x628438))
                # (Line 117) CreateUnit(1, UnitID_Bomb, locBC +1, player);
                DoActions(CreateUnit(1, UnitID_Bomb, locBC + 1, player))
                # (Line 118) SetBombWayBlock(unitEpd, 0); 	// no collision on bomb
                SetBombWayBlock(unitEpd_1, 0)
                # (Line 119) MoveUnit(1, UnitID_Bomb, player, locBC +1, loc+1);
                DoActions(MoveUnit(1, UnitID_Bomb, player, locBC + 1, loc + 1))
                # (Line 120) Bomb.NewBomb(unitEpd);			// Mark at map
                Bomb.NewBomb(unitEpd_1)
                # (Line 121) SetBombTimer(unitEpd, 10); 		// bomb timer
                SetBombTimer(unitEpd_1, 10)
                # (Line 122) const range = GetBombRange(player);
                range = GetBombRange(player)
                # (Line 123) SetRangeAtBomb(unitEpd, range); // Mark bomb range inside bom
                SetRangeAtBomb(unitEpd_1, range)
                # (Line 124) }
                # (Line 125) }
            EUDEndIf()
            # (Line 127) Helpers.ResetBuildQueue(unitEpd);
        EUDEndIf()
        Helpers.ResetBuildQueue(unitEpd)
        # (Line 128) }
        # (Line 129) }
    EUDEndIf()
    # (Line 131) function SetBombWayBlock(unitEpd, bool)

# (Line 132) {
@EUDFunc
def SetBombWayBlock(unitEpd, bool):
    # (Line 133) const noCollisionFlag = 0xA00000;
    noCollisionFlag = 0xA00000
    # (Line 134) const unitFlag = dwread_epd(unitEpd + 0x0DC/4);
    unitFlag = f_dwread_epd(unitEpd + 0x0DC // 4)
    # (Line 135) if(bool == 0)
    if EUDIf()(bool == 0):
        # (Line 136) SetMemoryEPD(unitEpd + 0x0DC/4, SetTo, unitFlag | noCollisionFlag);
        DoActions(SetMemoryEPD(unitEpd + 0x0DC // 4, SetTo, unitFlag | noCollisionFlag))
        # (Line 137) else if (unitFlag == (unitFlag | noCollisionFlag))
    if EUDElseIf()(unitFlag == (unitFlag | noCollisionFlag)):
        # (Line 138) SetMemoryEPD(unitEpd + 0x0DC/4, Subtract, noCollisionFlag);
        DoActions(SetMemoryEPD(unitEpd + 0x0DC // 4, Subtract, noCollisionFlag))
        # (Line 140) }
    EUDEndIf()
    # (Line 141) function IsBombWayBlocked(unitEpd)

# (Line 142) {
@EUDFunc
def IsBombWayBlocked(unitEpd):
    # (Line 143) const noCollisionFlag = 0xA00000;
    noCollisionFlag = 0xA00000
    # (Line 144) const unitFlag = dwread_epd(unitEpd + 0x0DC/4);
    unitFlag = f_dwread_epd(unitEpd + 0x0DC // 4)
    # (Line 145) if(unitFlag == (unitFlag | noCollisionFlag))
    if EUDIf()(unitFlag == (unitFlag | noCollisionFlag)):
        # (Line 146) return 0;
        EUDReturn(0)
        # (Line 147) else
        # (Line 148) return 1;
    if EUDElse()():
        EUDReturn(1)
        # (Line 149) }
    EUDEndIf()
    # (Line 150) function SetBombTimer(unitEpd, time)

# (Line 151) {
@EUDFunc
def SetBombTimer(unitEpd, time):
    # (Line 152) SetMemoryEPD(unitEpd + 0x114/4, SetTo, time);
    DoActions(SetMemoryEPD(unitEpd + 0x114 // 4, SetTo, time))
    # (Line 153) }
    # (Line 154) function GetBombRange(player)

# (Line 155) {
@EUDFunc
def GetBombRange(player):
    # (Line 156) for(var i = 0; i<12; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 12, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 157) if(Accumulate(player, Exactly, i, Gas))
        if EUDIf()(Accumulate(player, Exactly, i, Gas)):
            # (Line 158) return i;
            EUDReturn(i)
            # (Line 159) }
        EUDEndIf()
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 160) function SetBombRange(player, number)

# (Line 161) {
@EUDFunc
def SetBombRange(player, number):
    # (Line 162) SetResources(player, SetTo, number, Gas);
    DoActions(SetResources(player, SetTo, number, Gas))
    # (Line 163) }
    # (Line 164) function GetCurrentBN(player)

# (Line 165) {
@EUDFunc
def GetCurrentBN(player):
    # (Line 166) for(var i = 0; i<12; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 12, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 167) if(Command(player, Exactly, i, UnitID_Bomb))
        if EUDIf()(Command(player, Exactly, i, UnitID_Bomb)):
            # (Line 168) return i;
            EUDReturn(i)
            # (Line 170) }
        EUDEndIf()
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 171) function GetBombNumber(player)

# (Line 172) {
@EUDFunc
def GetBombNumber(player):
    # (Line 173) for(var i = 0; i<12; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 12, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 174) if(Accumulate(player, Exactly, i, Ore))
        if EUDIf()(Accumulate(player, Exactly, i, Ore)):
            # (Line 175) return i;
            EUDReturn(i)
            # (Line 176) }
        EUDEndIf()
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 177) function SetBombNumber(player, number)

# (Line 178) {
@EUDFunc
def SetBombNumber(player, number):
    # (Line 179) SetResources(player, SetTo, number, Ore);
    DoActions(SetResources(player, SetTo, number, Ore))
    # (Line 180) }
    # (Line 182) function GetRangeAtBomb(unitEpd)

# (Line 183) {
@EUDFunc
def GetRangeAtBomb(unitEpd):
    # (Line 184) return dwread_epd(unitEpd + 0xFC/4);
    EUDReturn(f_dwread_epd(unitEpd + 0xFC // 4))
    # (Line 185) }
    # (Line 187) function SetRangeAtBomb(unitEpd, range)

# (Line 188) {//union offset(space for rally & psi)
@EUDFunc
def SetRangeAtBomb(unitEpd, range):
    # (Line 189) dwwrite_epd(unitEpd + 0xFC/4, range);
    f_dwwrite_epd(unitEpd + 0xFC // 4, range)
    # (Line 190) }
    # (Line 192) function GetItem(player)

# (Line 193) {
@EUDFunc
def GetItem(player):
    # (Line 194) for(var i=0; i<6; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 6, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 195) {
        # (Line 196) const item = ItemList[i];
        item = ItemList[i]
        # (Line 197) if(Bring(Computer, AtLeast, 1, item, loclist[player]+1))
        if EUDIf()(Bring(Computer, AtLeast, 1, item, loclist[player] + 1)):
            # (Line 198) {
            # (Line 200) if(item == Item_rangeUp)
            if EUDIf()(item == Item_rangeUp):
                # (Line 201) {
                # (Line 202) const bombRange = GetBombRange(player);
                bombRange = GetBombRange(player)
                # (Line 203) if(bombRange < MaxRange)
                if EUDIf()(bombRange >= MaxRange, neg=True):
                    # (Line 204) {
                    # (Line 205) DisplayText("\x07[ Range + ]");
                    DoActions(DisplayText("\x07[ Range + ]"))
                    # (Line 206) SetBombRange(player, bombRange+1);
                    SetBombRange(player, bombRange + 1)
                    # (Line 207) return item;
                    EUDReturn(item)
                    # (Line 208) }
                    # (Line 209) return 0;
                EUDEndIf()
                EUDReturn(0)
                # (Line 210) }
                # (Line 212) if(item == Item_speedUp)
            EUDEndIf()
            if EUDIf()(item == Item_speedUp):
                # (Line 213) {
                # (Line 214) if(MemoryEPD(GetPlayerEpd(player) + 0x034 /4, AtMost, 1900) || PlayerSpeed[player] > 1900)
                if EUDIf()(EUDSCOr()(MemoryEPD(GetPlayerEpd(player) + 0x034 // 4, AtMost, 1900))(PlayerSpeed[player] <= 1900, neg=True)()):
                    # (Line 215) {
                    # (Line 216) DisplayText("\x07[ Speed + ]");
                    DoActions(DisplayText("\x07[ Speed + ]"))
                    # (Line 217) SetMemoryEPD(GetPlayerEpd(player) + 0x034 /4, Add, 100);
                    DoActions(SetMemoryEPD(GetPlayerEpd(player) + 0x034 // 4, Add, 100))
                    # (Line 218) PlayerSpeed[player] = PlayerSpeed[player] + 100;
                    _ARRW(PlayerSpeed, player) << (PlayerSpeed[player] + 100)
                    # (Line 219) return item;
                    EUDReturn(item)
                    # (Line 220) }
                    # (Line 221) return 0;
                EUDEndIf()
                EUDReturn(0)
                # (Line 222) }
                # (Line 224) if(item == Item_bombNUp)
            EUDEndIf()
            if EUDIf()(item == Item_bombNUp):
                # (Line 225) {
                # (Line 226) const bombNumber = GetBombNumber(player);
                bombNumber = GetBombNumber(player)
                # (Line 227) if(bombNumber < MaxBomb)
                if EUDIf()(bombNumber >= MaxBomb, neg=True):
                    # (Line 228) {
                    # (Line 229) DisplayText("\x07[ Bomb + ]");
                    DoActions(DisplayText("\x07[ Bomb + ]"))
                    # (Line 230) SetBombNumber(player, bombNumber+1);
                    SetBombNumber(player, bombNumber + 1)
                    # (Line 231) return item;
                    EUDReturn(item)
                    # (Line 232) }
                    # (Line 233) return 0;
                EUDEndIf()
                EUDReturn(0)
                # (Line 234) }
                # (Line 236) if(item == Item_rangeMax)
            EUDEndIf()
            if EUDIf()(item == Item_rangeMax):
                # (Line 237) {
                # (Line 238) const bombRange = GetBombRange(player);
                bombRange = GetBombRange(player)
                # (Line 239) if(bombRange < MaxRange)
                if EUDIf()(bombRange >= MaxRange, neg=True):
                    # (Line 240) {
                    # (Line 241) DisplayText("\x07[ Range ++ ]");
                    DoActions(DisplayText("\x07[ Range ++ ]"))
                    # (Line 242) SetBombRange(player, bombRange+2);
                    SetBombRange(player, bombRange + 2)
                    # (Line 243) return item;
                    EUDReturn(item)
                    # (Line 244) }
                    # (Line 245) return 0;
                EUDEndIf()
                EUDReturn(0)
                # (Line 246) }
                # (Line 248) if(item == Item_rideTank)
            EUDEndIf()
            if EUDIf()(item == Item_rideTank):
                # (Line 249) {
                # (Line 250) if(Command(player, Exactly, 1, UnitID_Civilian))
                if EUDIf()(Command(player, Exactly, 1, UnitID_Civilian)):
                    # (Line 251) {
                    # (Line 252) PlayerSpeed[player] = dwread_epd(GetPlayerEpd(player) + 0x034 /4);
                    _ARRW(PlayerSpeed, player) << (f_dwread_epd(GetPlayerEpd(player) + 0x034 // 4))
                    # (Line 253) RemoveUnit(UnitID_Civilian, player);
                    DoActions(RemoveUnit(UnitID_Civilian, player))
                    # (Line 254) SetPlayerEpd(player);
                    SetPlayerEpd(player)
                    # (Line 255) const chance = Helpers.GetRandom(0,2);
                    chance = Helpers.GetRandom(0, 2)
                    # (Line 256) if(chance == 1)
                    if EUDIf()(chance == 1):
                        # (Line 257) {
                        # (Line 258) CreateUnit(1, UnitID_Tank, loclist[player]+1, player);
                        DoActions(CreateUnit(1, UnitID_Tank, loclist[player] + 1, player))
                        # (Line 259) SetDeaths(player, SetTo, 1, UnitID_Tank);
                        DoActions(SetDeaths(player, SetTo, 1, UnitID_Tank))
                        # (Line 260) }
                        # (Line 261) else
                        # (Line 262) {
                    if EUDElse()():
                        # (Line 263) CreateUnit(1, UnitID_Goliath, loclist[player]+1, player);
                        DoActions(CreateUnit(1, UnitID_Goliath, loclist[player] + 1, player))
                        # (Line 264) SetDeaths(player, SetTo, 1, UnitID_Goliath);
                        DoActions(SetDeaths(player, SetTo, 1, UnitID_Goliath))
                        # (Line 265) }
                        # (Line 266) return item;
                    EUDEndIf()
                    EUDReturn(item)
                    # (Line 267) }
                    # (Line 268) return 0;
                EUDEndIf()
                EUDReturn(0)
                # (Line 270) }
                # (Line 271) if(item == Item_rideHide)
            EUDEndIf()
            if EUDIf()(item == Item_rideHide):
                # (Line 272) {
                # (Line 273) if(1)
                if EUDIf()(1):
                    # (Line 274) {
                    # (Line 278) DisplayText("\x07똥을 밟았다.");
                    DoActions(DisplayText("\x07똥을 밟았다."))
                    # (Line 279) return item;
                    EUDReturn(item)
                    # (Line 280) }
                    # (Line 281) return 0;
                EUDEndIf()
                EUDReturn(0)
                # (Line 283) }
                # (Line 284) }
            EUDEndIf()
            # (Line 285) }
        EUDEndIf()
        # (Line 286) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 288) function OffRide(player)

# (Line 289) {
@EUDFunc
def OffRide(player):
    # (Line 290) if(Command(player, Exactly, 0, '(men)'))
    if EUDIf()(Command(player, Exactly, 0, '(men)')):
        # (Line 291) {
        # (Line 292) if(Helpers.GetDeath(player, UnitID_Tank) > 0 || Helpers.GetDeath(player, UnitID_Goliath) > 0)
        if EUDIf()(EUDSCOr()(Helpers.GetDeath(player, UnitID_Tank) <= 0, neg=True)(Helpers.GetDeath(player, UnitID_Goliath) <= 0, neg=True)()):
            # (Line 293) {
            # (Line 294) if(Bomb.boom == 0)
            if EUDIf()(Bomb.boom == 0):
                # (Line 295) {
                # (Line 296) SetPlayerEpd(player);
                SetPlayerEpd(player)
                # (Line 297) CreateUnit(1, UnitID_Civilian, loclist[player]+1, player);
                DoActions(CreateUnit(1, UnitID_Civilian, loclist[player] + 1, player))
                # (Line 298) SetMemoryEPD(GetPlayerEpd(player) + 0x034 /4, SetTo, PlayerSpeed[player]);
                DoActions(SetMemoryEPD(GetPlayerEpd(player) + 0x034 // 4, SetTo, PlayerSpeed[player]))
                # (Line 299) SetDeaths(player, SetTo, 0, UnitID_Tank);
                DoActions(SetDeaths(player, SetTo, 0, UnitID_Tank))
                # (Line 300) SetDeaths(player, SetTo, 0, UnitID_Goliath);
                DoActions(SetDeaths(player, SetTo, 0, UnitID_Goliath))
                # (Line 301) }
                # (Line 302) }
            EUDEndIf()
            # (Line 303) }
        EUDEndIf()
        # (Line 304) }
    EUDEndIf()
