## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 2) const Computer					= $P8;
Computer = _CGFW(lambda: [7], 1)[0]
# (Line 3) const UnitID_Player				= [15, 3, 5];
UnitID_Player = _CGFW(lambda: [_ARR(FlattenList([15, 3, 5]))], 1)[0]
# (Line 4) const UnitID_Bomb				= $U('Zerg Egg');
UnitID_Bomb = _CGFW(lambda: [EncodeUnit('Zerg Egg')], 1)[0]
# (Line 5) const UnitID_Fire				= $U('Zerg Scourge');
UnitID_Fire = _CGFW(lambda: [EncodeUnit('Zerg Scourge')], 1)[0]
# (Line 6) const UnitID_Wall				= 1;	// Terrain
UnitID_Wall = _CGFW(lambda: [1], 1)[0]
# (Line 7) const UnitID_Box				= 2;	// Breakable
UnitID_Box = _CGFW(lambda: [2], 1)[0]
# (Line 8) const DeadBox					= -1;
DeadBox = _CGFW(lambda: [-1], 1)[0]
# (Line 10) const Item_rangeUp				= 128;
Item_rangeUp = _CGFW(lambda: [128], 1)[0]
# (Line 11) const Item_speedUp				= 215;
Item_speedUp = _CGFW(lambda: [215], 1)[0]
# (Line 12) const Item_bombNUp				= 218;
Item_bombNUp = _CGFW(lambda: [218], 1)[0]
# (Line 13) const Item_rangeMax				= 219;
Item_rangeMax = _CGFW(lambda: [219], 1)[0]
# (Line 14) const Item_rideTank				= 217;
Item_rideTank = _CGFW(lambda: [217], 1)[0]
# (Line 15) const Item_rideHide				= 216;
Item_rideHide = _CGFW(lambda: [216], 1)[0]
# (Line 17) const ItemList					= [Item_rangeUp,
# (Line 18) Item_speedUp,
# (Line 19) Item_bombNUp,
# (Line 20) Item_rangeMax,
# (Line 21) Item_rideTank,
# (Line 22) Item_rideHide];
ItemList = _CGFW(lambda: [_ARR(FlattenList([Item_rangeUp, Item_speedUp, Item_bombNUp, Item_rangeMax, Item_rideTank, Item_rideHide]))], 1)[0]
