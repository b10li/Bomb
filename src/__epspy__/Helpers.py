## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 2) const Computer				  = $P8;
Computer = _CGFW(lambda: [7], 1)[0]
# (Line 3) const UnitID_Player			= [15, 3, 5];
UnitID_Player = _CGFW(lambda: [_ARR(FlattenList([15, 3, 5]))], 1)[0]
# (Line 4) const UnitID_Bomb			   = $U('Zerg Egg');
UnitID_Bomb = _CGFW(lambda: [EncodeUnit('Zerg Egg')], 1)[0]
# (Line 5) const UnitID_Fire			   = $U('Zerg Scourge');
UnitID_Fire = _CGFW(lambda: [EncodeUnit('Zerg Scourge')], 1)[0]
# (Line 6) const UnitID_Wall			   = 1;	// Terrain
UnitID_Wall = _CGFW(lambda: [1], 1)[0]
# (Line 7) const UnitID_Box				= 2;	// Breakable
UnitID_Box = _CGFW(lambda: [2], 1)[0]
# (Line 8) const DeadBox				   = -1;
DeadBox = _CGFW(lambda: [-1], 1)[0]
# (Line 10) const scale					 = 32;   // tile
scale = _CGFW(lambda: [32], 1)[0]
# (Line 12) const Item_rangeUp			  = 128;
Item_rangeUp = _CGFW(lambda: [128], 1)[0]
# (Line 13) const Item_speedUp			  = 215;
Item_speedUp = _CGFW(lambda: [215], 1)[0]
# (Line 14) const Item_bombNUp			  = 218;
Item_bombNUp = _CGFW(lambda: [218], 1)[0]
# (Line 15) const Item_rangeMax			 = 219;
Item_rangeMax = _CGFW(lambda: [219], 1)[0]
# (Line 16) const Item_rideTank			 = 217;
Item_rideTank = _CGFW(lambda: [217], 1)[0]
# (Line 17) const Item_rideHide			 = 216;
Item_rideHide = _CGFW(lambda: [216], 1)[0]
# (Line 19) const ItemList				  = [Item_rangeUp,
# (Line 20) Item_speedUp,
# (Line 21) Item_bombNUp,
# (Line 22) Item_rangeMax,
# (Line 23) Item_rideTank,
# (Line 24) Item_rideHide];
ItemList = _CGFW(lambda: [_ARR(FlattenList([Item_rangeUp, Item_speedUp, Item_bombNUp, Item_rangeMax, Item_rideTank, Item_rideHide]))], 1)[0]
# (Line 27) function GetRandom(low, high) {
@EUDFunc
def GetRandom(low, high):
    # (Line 28) return (rand() % (high - low)) + low;
    EUDReturn((f_rand() % (high - low)) + low)
    # (Line 29) }
    # (Line 31) function min(a, b) {

@EUDFunc
def f_min(a, b):
    # (Line 32) if(a > b) return b;
    if EUDIf()(a <= b, neg=True):
        EUDReturn(b)
        # (Line 33) else return a;
    if EUDElse()():
        EUDReturn(a)
        # (Line 34) }
    EUDEndIf()
    # (Line 36) function abs(x) {

@EUDFunc
def f_abs(x):
    # (Line 37) if(x >= 0x80000000) {
    if EUDIf()(x >= 0x80000000):
        # (Line 38) x = -x;
        x << (-x)
        # (Line 39) }
        # (Line 40) return x;
    EUDEndIf()
    EUDReturn(x)
    # (Line 41) }
    # (Line 45) function GetDeath(player, unit)

# (Line 46) {
@EUDFunc
def GetDeath(player, unit):
    # (Line 47) for(var i=0; i<50; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 50, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 48) if(Deaths(player, Exactly, i, unit))
        if EUDIf()(Deaths(player, Exactly, i, unit)):
            # (Line 49) return i;
            EUDReturn(i)
            # (Line 50) }
        EUDEndIf()
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 52) function EUDSetLocation(locID, x, y)

# (Line 53) {
@EUDFunc
def EUDSetLocation(locID, x, y):
    # (Line 54) const locscale = 15;
    locscale = 15
    # (Line 55) dwwrite_epd(EPD(0x58DC60) + 5 * locID + 0, x - locscale);
    f_dwwrite_epd(EPD(0x58DC60) + 5 * locID + 0, x - locscale)
    # (Line 56) dwwrite_epd(EPD(0x58DC60) + 5 * locID + 1, y - locscale);
    f_dwwrite_epd(EPD(0x58DC60) + 5 * locID + 1, y - locscale)
    # (Line 57) dwwrite_epd(EPD(0x58DC60) + 5 * locID + 2, x + locscale);
    f_dwwrite_epd(EPD(0x58DC60) + 5 * locID + 2, x + locscale)
    # (Line 58) dwwrite_epd(EPD(0x58DC60) + 5 * locID + 3, y + locscale);
    f_dwwrite_epd(EPD(0x58DC60) + 5 * locID + 3, y + locscale)
    # (Line 59) }
    # (Line 61) function EUDGetLocation(locID)

# (Line 62) {
@EUDFunc
def EUDGetLocation(locID):
    # (Line 63) const l = dwread_epd(EPD(0x58DC60) + 5 * locID + 0);
    l = f_dwread_epd(EPD(0x58DC60) + 5 * locID + 0)
    # (Line 64) const u = dwread_epd(EPD(0x58DC60) + 5 * locID + 1);
    u = f_dwread_epd(EPD(0x58DC60) + 5 * locID + 1)
    # (Line 65) const r = dwread_epd(EPD(0x58DC60) + 5 * locID + 2);
    r = f_dwread_epd(EPD(0x58DC60) + 5 * locID + 2)
    # (Line 66) const d = dwread_epd(EPD(0x58DC60) + 5 * locID + 3);
    d = f_dwread_epd(EPD(0x58DC60) + 5 * locID + 3)
    # (Line 68) return (l+r)/2, (u+d)/2;
    EUDReturn((l + r) // 2, (u + d) // 2)
    # (Line 69) }
    # (Line 71) function setpcolor(pnum, color)

# (Line 72) {
@EUDFunc
def f_setpcolor(pnum, color):
    # (Line 73) const pcolor_dst = 0x581D76 + 8 * pnum;
    pcolor_dst = 0x581D76 + 8 * pnum
    # (Line 74) const mcolor_dst = 0x581DD6 + pnum;
    mcolor_dst = 0x581DD6 + pnum
    # (Line 75) bwrite(pcolor_dst, color);
    f_bwrite(pcolor_dst, color)
    # (Line 76) bwrite(mcolor_dst, color);
    f_bwrite(mcolor_dst, color)
    # (Line 77) }
    # (Line 79) function SetOrderTo(unitEpd, orderID)

# (Line 80) {
@EUDFunc
def SetOrderTo(unitEpd, orderID):
    # (Line 81) const player = dwbreak(dwread_epd(unitEpd + 0x4C / 4))[[2]];
    player = f_dwbreak(f_dwread_epd(unitEpd + 0x4C // 4))[2]
    # (Line 82) SetMemoryEPD(unitEpd + 0x4C / 4, SetTo, player + orderID * 256);
    DoActions(SetMemoryEPD(unitEpd + 0x4C // 4, SetTo, player + orderID * 256))
    # (Line 83) }
    # (Line 85) function IsOrder(unitEpd, orderID)

# (Line 86) {
@EUDFunc
def IsOrder(unitEpd, orderID):
    # (Line 87) const order = dwbreak(dwread_epd(unitEpd + 0x4C / 4))[[3]];
    order = f_dwbreak(f_dwread_epd(unitEpd + 0x4C // 4))[3]
    # (Line 88) if(order == orderID)
    if EUDIf()(order == orderID):
        # (Line 89) return 1;
        EUDReturn(1)
        # (Line 90) else
        # (Line 91) return 0;
    if EUDElse()():
        EUDReturn(0)
        # (Line 93) }
    EUDEndIf()
    # (Line 95) function GetBuildQueue1(unitEpd)

# (Line 96) {
@EUDFunc
def GetBuildQueue1(unitEpd):
    # (Line 97) const BuildQueueList = dwread_epd(unitEpd + 0x98 /4); //대기열
    BuildQueueList = f_dwread_epd(unitEpd + 0x98 // 4)
    # (Line 98) const BuildQueue1 = dwbreak(BuildQueueList)[[0]]; //1번대기열
    BuildQueue1 = f_dwbreak(BuildQueueList)[0]
    # (Line 100) return BuildQueue1;
    EUDReturn(BuildQueue1)
    # (Line 101) }
    # (Line 103) function ResetBuildQueue(unitEpd)

# (Line 104) {
@EUDFunc
def ResetBuildQueue(unitEpd):
    # (Line 106) dwwrite_epd(unitEpd + 0xA4 /4, 1507584);
    f_dwwrite_epd(unitEpd + 0xA4 // 4, 1507584)
    # (Line 107) dwwrite_epd(unitEpd + 0x98 /4, 14942436); // Q12
    f_dwwrite_epd(unitEpd + 0x98 // 4, 14942436)
    # (Line 108) dwwrite_epd(unitEpd + 0x9C /4, 14942436); // Q34
    f_dwwrite_epd(unitEpd + 0x9C // 4, 14942436)
    # (Line 110) }
    # (Line 112) function SetBuildQueue1(unitEpd, unitNumber)

# (Line 113) {
@EUDFunc
def SetBuildQueue1(unitEpd, unitNumber):
    # (Line 115) SetMemoryEPD(unitEpd + 0x98/4, SetTo, unitNumber +14942208);
    DoActions(SetMemoryEPD(unitEpd + 0x98 // 4, SetTo, unitNumber + 14942208))
    # (Line 116) }
