## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 2) function GetRandom(low, high) {
@EUDFunc
def GetRandom(low, high):
    # (Line 3) return (rand() % (high - low)) + low;
    EUDReturn((f_rand() % (high - low)) + low)
    # (Line 4) }
    # (Line 6) function min(a, b) {

@EUDFunc
def f_min(a, b):
    # (Line 7) if(a > b) return b;
    if EUDIf()(a <= b, neg=True):
        EUDReturn(b)
        # (Line 8) else return a;
    if EUDElse()():
        EUDReturn(a)
        # (Line 9) }
    EUDEndIf()
    # (Line 11) function abs(x) {

@EUDFunc
def f_abs(x):
    # (Line 12) if(x >= 0x80000000) {
    if EUDIf()(x >= 0x80000000):
        # (Line 13) x = -x;
        x << (-x)
        # (Line 14) }
        # (Line 15) return x;
    EUDEndIf()
    EUDReturn(x)
    # (Line 16) }
    # (Line 20) function GetDeath(player, unit)

# (Line 21) {
@EUDFunc
def GetDeath(player, unit):
    # (Line 22) for(var i=0; i<50; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 50, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 23) if(Deaths(player, Exactly, i, unit))
        if EUDIf()(Deaths(player, Exactly, i, unit)):
            # (Line 24) return i;
            EUDReturn(i)
            # (Line 25) }
        EUDEndIf()
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 27) function EUDSetLocation(locID, x, y)

# (Line 28) {
@EUDFunc
def EUDSetLocation(locID, x, y):
    # (Line 29) const locscale = 15;
    locscale = 15
    # (Line 30) dwwrite_epd(EPD(0x58DC60) + 5 * locID + 0, x - locscale);
    f_dwwrite_epd(EPD(0x58DC60) + 5 * locID + 0, x - locscale)
    # (Line 31) dwwrite_epd(EPD(0x58DC60) + 5 * locID + 1, y - locscale);
    f_dwwrite_epd(EPD(0x58DC60) + 5 * locID + 1, y - locscale)
    # (Line 32) dwwrite_epd(EPD(0x58DC60) + 5 * locID + 2, x + locscale);
    f_dwwrite_epd(EPD(0x58DC60) + 5 * locID + 2, x + locscale)
    # (Line 33) dwwrite_epd(EPD(0x58DC60) + 5 * locID + 3, y + locscale);
    f_dwwrite_epd(EPD(0x58DC60) + 5 * locID + 3, y + locscale)
    # (Line 34) }
    # (Line 36) function EUDGetLocation(locID)

# (Line 37) {
@EUDFunc
def EUDGetLocation(locID):
    # (Line 38) const l = dwread_epd(EPD(0x58DC60) + 5 * locID + 0);
    l = f_dwread_epd(EPD(0x58DC60) + 5 * locID + 0)
    # (Line 39) const u = dwread_epd(EPD(0x58DC60) + 5 * locID + 1);
    u = f_dwread_epd(EPD(0x58DC60) + 5 * locID + 1)
    # (Line 40) const r = dwread_epd(EPD(0x58DC60) + 5 * locID + 2);
    r = f_dwread_epd(EPD(0x58DC60) + 5 * locID + 2)
    # (Line 41) const d = dwread_epd(EPD(0x58DC60) + 5 * locID + 3);
    d = f_dwread_epd(EPD(0x58DC60) + 5 * locID + 3)
    # (Line 43) return (l+r)/2, (u+d)/2;
    EUDReturn((l + r) // 2, (u + d) // 2)
    # (Line 44) }
    # (Line 46) function setpcolor(pnum, color)

# (Line 47) {
@EUDFunc
def f_setpcolor(pnum, color):
    # (Line 48) const pcolor_dst = 0x581D76 + 8 * pnum;
    pcolor_dst = 0x581D76 + 8 * pnum
    # (Line 49) const mcolor_dst = 0x581DD6 + pnum;
    mcolor_dst = 0x581DD6 + pnum
    # (Line 50) bwrite(pcolor_dst, color);
    f_bwrite(pcolor_dst, color)
    # (Line 51) bwrite(mcolor_dst, color);
    f_bwrite(mcolor_dst, color)
    # (Line 52) }
    # (Line 54) function SetOrderTo(unitEpd, orderID)

# (Line 55) {
@EUDFunc
def SetOrderTo(unitEpd, orderID):
    # (Line 56) const player = dwbreak(dwread_epd(unitEpd + 0x4C / 4))[[2]];
    player = f_dwbreak(f_dwread_epd(unitEpd + 0x4C // 4))[2]
    # (Line 57) SetMemoryEPD(unitEpd + 0x4C / 4, SetTo, player + orderID * 256);
    DoActions(SetMemoryEPD(unitEpd + 0x4C // 4, SetTo, player + orderID * 256))
    # (Line 58) }
    # (Line 60) function IsOrder(unitEpd, orderID)

# (Line 61) {
@EUDFunc
def IsOrder(unitEpd, orderID):
    # (Line 62) const order = dwbreak(dwread_epd(unitEpd + 0x4C / 4))[[3]];
    order = f_dwbreak(f_dwread_epd(unitEpd + 0x4C // 4))[3]
    # (Line 63) if(order == orderID)
    if EUDIf()(order == orderID):
        # (Line 64) return 1;
        EUDReturn(1)
        # (Line 65) else
        # (Line 66) return 0;
    if EUDElse()():
        EUDReturn(0)
        # (Line 68) }
    EUDEndIf()
    # (Line 70) function GetBuildQueue1(unitEpd)

# (Line 71) {
@EUDFunc
def GetBuildQueue1(unitEpd):
    # (Line 72) const BuildQueueList = dwread_epd(unitEpd + 0x98 /4); //대기열
    BuildQueueList = f_dwread_epd(unitEpd + 0x98 // 4)
    # (Line 73) const BuildQueue1 = dwbreak(BuildQueueList)[[0]]; //1번대기열
    BuildQueue1 = f_dwbreak(BuildQueueList)[0]
    # (Line 75) return BuildQueue1;
    EUDReturn(BuildQueue1)
    # (Line 76) }
    # (Line 78) function ResetBuildQueue(unitEpd)

# (Line 79) {
@EUDFunc
def ResetBuildQueue(unitEpd):
    # (Line 81) dwwrite_epd(unitEpd + 0xA4 /4, 1507584);
    f_dwwrite_epd(unitEpd + 0xA4 // 4, 1507584)
    # (Line 82) dwwrite_epd(unitEpd + 0x98 /4, 14942436); // Q12
    f_dwwrite_epd(unitEpd + 0x98 // 4, 14942436)
    # (Line 83) dwwrite_epd(unitEpd + 0x9C /4, 14942436); // Q34
    f_dwwrite_epd(unitEpd + 0x9C // 4, 14942436)
    # (Line 85) }
    # (Line 87) function SetBuildQueue1(unitEpd, unitNumber)

# (Line 88) {
@EUDFunc
def SetBuildQueue1(unitEpd, unitNumber):
    # (Line 90) SetMemoryEPD(unitEpd + 0x98/4, SetTo, unitNumber +14942208);
    DoActions(SetMemoryEPD(unitEpd + 0x98 // 4, SetTo, unitNumber + 14942208))
    # (Line 91) }
    # (Line 93) function GetPlayerID(unitEpd)

# (Line 94) {
@EUDFunc
def GetPlayerID(unitEpd):
    # (Line 95) if(unitEpd != 0)
    if EUDIf()(unitEpd == 0, neg=True):
        # (Line 96) return dwbreak(dwread_epd(unitEpd + (0x4C / 4)))[[2]];
        EUDReturn(f_dwbreak(f_dwread_epd(unitEpd + (0x4C // 4)))[2])
        # (Line 97) else
        # (Line 98) return 0;
    if EUDElse()():
        EUDReturn(0)
        # (Line 99) }
    EUDEndIf()
    # (Line 101) function GetUnitXY(unitEpd)

# (Line 102) {
@EUDFunc
def GetUnitXY(unitEpd):
    # (Line 103) if(unitEpd != 0)
    if EUDIf()(unitEpd == 0, neg=True):
        # (Line 104) return dwbreak(dwread_epd(unitEpd + (0x28 / 4)))[[0,1]];
        EUDReturn(_SRET(f_dwbreak(f_dwread_epd(unitEpd + (0x28 // 4))), [0, 1]))
        # (Line 105) else
        # (Line 106) return 0, 0;
    if EUDElse()():
        EUDReturn(0, 0)
        # (Line 107) }
    EUDEndIf()
    # (Line 109) function GetUnitType(unitEpd)

# (Line 110) {
@EUDFunc
def GetUnitType(unitEpd):
    # (Line 111) if(unitEpd != 0)
    if EUDIf()(unitEpd == 0, neg=True):
        # (Line 112) return dwbreak(dwread_epd(unitEpd + (0x64 / 4)))[[3]];
        EUDReturn(f_dwbreak(f_dwread_epd(unitEpd + (0x64 // 4)))[3])
        # (Line 113) else
        # (Line 114) return 0;
    if EUDElse()():
        EUDReturn(0)
        # (Line 115) }
    EUDEndIf()
