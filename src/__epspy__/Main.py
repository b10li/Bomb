## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 2) import Player;
import Player
# (Line 3) import Bomb;
import Bomb
# (Line 4) import Map;
import Map
# (Line 6) function onPluginStart()
# (Line 7) {
@EUDFunc
def onPluginStart():
    # (Line 8) randomize();
    f_randomize()
    # (Line 9) Map.GetMap();
    Map.GetMap()
    # (Line 10) Map.Render();
    Map.Render()
    # (Line 12) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 13) var player = getcurpl();
    player = EUDVariable()
    player << (f_getcurpl())
    # (Line 14) if(player < 6) //P1~P6
    if EUDIf()(player >= 6, neg=True):
        # (Line 15) Player.InitPlayer(player);
        Player.InitPlayer(player)
        # (Line 16) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 18) }
    # (Line 20) function GameEnd();

# (Line 21) function beforeTriggerExec()
# (Line 22) {
@EUDFunc
def beforeTriggerExec():
    # (Line 24) Bomb.CheckBomb();
    Bomb.CheckBomb()
    # (Line 25) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 26) var player = getcurpl();
    player = EUDVariable()
    player << (f_getcurpl())
    # (Line 27) if(player < 6)
    if EUDIf()(player >= 6, neg=True):
        # (Line 28) {
        # (Line 29) Player.PlaceBomb(Player.GetPlayerEpd(player));
        Player.PlaceBomb(Player.GetPlayerEpd(player))
        # (Line 30) Player.FollowLocation(player);
        Player.FollowLocation(player)
        # (Line 31) Player.ItemCollect(player);
        Player.ItemCollect(player)
        # (Line 32) Player.OffRide(player);
        Player.OffRide(player)
        # (Line 33) }
        # (Line 34) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 36) GameEnd();
    GameEnd()
    # (Line 37) }
    # (Line 39) function afterTriggerExec()

# (Line 40) {
@EUDFunc
def afterTriggerExec():
    # (Line 42) SetMemory(0x6509A0, SetTo, 0);
    DoActions(SetMemory(0x6509A0, SetTo, 0))
    # (Line 43) }
    # (Line 45) function GameEnd()

# (Line 46) {
@EUDFunc
def GameEnd():
    # (Line 47) if(Command($Force1, AtMost, 1, '(men)') &&
    _t1 = EUDIf()
    # (Line 48) Command(7, Exactly, 0, 15) &&
    # (Line 49) Accumulate($Force1, AtLeast, 1, OreAndGas))
    if _t1(EUDSCAnd()(Command(18, AtMost, 1, '(men)'))(Command(7, Exactly, 0, 15))(Accumulate(18, AtLeast, 1, OreAndGas))()):
        # (Line 50) {
        # (Line 51) SetDeaths(7, Add, 1, 200);
        DoActions(SetDeaths(7, Add, 1, 200))
        # (Line 52) }
        # (Line 53) if(Deaths(7, AtLeast, 24, 200))
    EUDEndIf()
    if EUDIf()(Deaths(7, AtLeast, 24, 200)):
        # (Line 54) {
        # (Line 55) if(Command($Force1, AtMost, 1, '(men)'))
        if EUDIf()(Command(18, AtMost, 1, '(men)')):
            # (Line 56) {
            # (Line 57) EUDPlayerLoop()();
            EUDPlayerLoop()()
            # (Line 58) DisplayText("\r\n\r\n\r\n\r\n\r\n\x13니가 이겼다\r\n\r\n\r\n\r\n\r\n");
            DoActions(DisplayText("\r\n\r\n\r\n\r\n\r\n\x13니가 이겼다\r\n\r\n\r\n\r\n\r\n"))
            # (Line 59) Victory();
            DoActions(Victory())
            # (Line 60) EUDEndPlayerLoop();
            EUDEndPlayerLoop()
            # (Line 61) }
            # (Line 62) else
            # (Line 63) SetDeaths(7, SetTo, 0, 200);
        if EUDElse()():
            DoActions(SetDeaths(7, SetTo, 0, 200))
            # (Line 64) }
        EUDEndIf()
        # (Line 65) }
    EUDEndIf()
