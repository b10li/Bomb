## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import Header;
import Header
# (Line 2) import Player;
import Player
# (Line 3) import Helpers;
import Helpers
# (Line 5) const row						= 20;
row = _CGFW(lambda: [20], 1)[0]
# (Line 6) const col						= 13;
col = _CGFW(lambda: [13], 1)[0]
# (Line 7) const Map						= EUDArray(row*col);
Map = _CGFW(lambda: [EUDArray(row * col)], 1)[0]
# (Line 8) const scale						= 32;
scale = _CGFW(lambda: [32], 1)[0]
# (Line 9) const Computer					= Header.Computer;
Computer = _CGFW(lambda: [Header.Computer], 1)[0]
# (Line 11) const fillLoc 					= $L('draw');
fillLoc = _CGFW(lambda: [GetLocationIndex('draw')], 1)[0]
# (Line 12) const x_offset 					= 0;	// tile index ex) [x][y]
x_offset = _CGFW(lambda: [0], 1)[0]
# (Line 13) const y_offset 					= 0;
y_offset = _CGFW(lambda: [0], 1)[0]
# (Line 16) function GetMapXY(x, y)
# (Line 17) {
@EUDFunc
def GetMapXY(x, y):
    # (Line 18) return Map[x + y* row];
    EUDReturn(Map[x + y * row])
    # (Line 19) }
    # (Line 21) function SetMapXY(x, y, val)

# (Line 22) {
@EUDFunc
def SetMapXY(x, y, val):
    # (Line 23) Map[x + y* row] = val;
    _ARRW(Map, x + y * row) << (val)
    # (Line 24) }
    # (Line 26) function GetTileIndex(unitEpd)

# (Line 27) {
@EUDFunc
def GetTileIndex(unitEpd):
    # (Line 28) if(unitEpd != 0)
    if EUDIf()(unitEpd == 0, neg=True):
        # (Line 29) {
        # (Line 30) const posUnitX, posUnitY = dwbreak(dwread_epd(unitEpd + 0x28 / 4))[[0,1]];
        posUnitX, posUnitY = List2Assignable([_SRET(f_dwbreak(f_dwread_epd(unitEpd + 0x28 // 4)), [0, 1])])
        # (Line 31) const x = posUnitX / scale;
        x = posUnitX // scale
        # (Line 32) const y = posUnitY / scale;
        y = posUnitY // scale
        # (Line 33) return x - x_offset, y - y_offset;
        EUDReturn(x - x_offset, y - y_offset)
        # (Line 34) }
        # (Line 35) else return 0, 0;
    if EUDElse()():
        EUDReturn(0, 0)
        # (Line 36) }
    EUDEndIf()
    # (Line 38) function GetTileXY(x,y)

# (Line 39) {
@EUDFunc
def GetTileXY(x, y):
    # (Line 40) return (((x+ x_offset)*scale)+scale/2), (((y+y_offset)*scale)+scale/2);
    EUDReturn((((x + x_offset) * scale) + scale // 2), (((y + y_offset) * scale) + scale // 2))
    # (Line 41) }
    # (Line 44) function InitMap()

# (Line 45) {
@EUDFunc
def InitMap():
    # (Line 46) for(var i = 0; i < row; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= row, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 47) for(var j = 0; j < col; j++)
        j = EUDVariable()
        j << (0)
        if EUDWhile()(j >= col, neg=True):
            def _t4():
                j.__iadd__(1)
            # (Line 48) SetMapXY(i, j, 0);
            SetMapXY(i, j, 0)
            # (Line 49) }
            EUDSetContinuePoint()
            _t4()
        EUDEndWhile()
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 51) function Mapper()

# (Line 52) {
@EUDFunc
def Mapper():
    # (Line 53) const Map0 = [
    # (Line 55) 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, //0
    # (Line 56) 1,0,0,2,2,2,2,2,0,0,0,0,2,2,2,2,2,0,0,1, //1
    # (Line 57) 1,0,1,2,1,2,1,2,1,0,0,1,2,1,2,1,2,1,0,1, //2
    # (Line 58) 1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1, //3
    # (Line 59) 1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,1,2,1, //4
    # (Line 60) 1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,1, //5
    # (Line 61) 1,0,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,1,0,1, //6
    # (Line 62) 1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,1, //7
    # (Line 63) 1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,1,2,1, //8
    # (Line 64) 1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1, //9
    # (Line 65) 1,0,1,2,1,2,1,2,1,0,0,1,2,1,2,1,2,1,0,1, //10
    # (Line 66) 1,0,0,2,2,2,2,2,0,0,0,0,2,2,2,2,2,0,0,1, //11
    # (Line 67) 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1  //12
    # (Line 68) ];
    Map0 = _ARR(FlattenList([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 1, 1, 0, 1, 2, 1, 2, 1, 2, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1, 1, 0, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0, 1, 2, 1, 2, 1, 2, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 1, 1, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))
    # (Line 70) for(var x = 0; x < row; x++)
    x = EUDVariable()
    x << (0)
    if EUDWhile()(x >= row, neg=True):
        def _t2():
            x.__iadd__(1)
        # (Line 71) for(var y = 0; y < col; y++)
        y = EUDVariable()
        y << (0)
        if EUDWhile()(y >= col, neg=True):
            def _t4():
                y.__iadd__(1)
            # (Line 72) SetMapXY(x, y, Map0[x + y *row]);
            SetMapXY(x, y, Map0[x + y * row])
            # (Line 73) }
            EUDSetContinuePoint()
            _t4()
        EUDEndWhile()
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 75) function GetMap()

# (Line 76) {
@EUDFunc
def GetMap():
    # (Line 77) Mapper();
    Mapper()
    # (Line 78) }
    # (Line 83) function fill(x, y, style);

# (Line 84) function Render() {
@EUDFunc
def Render():
    # (Line 85) for (var y = 0; y < col; y++) {
    y = EUDVariable()
    y << (0)
    if EUDWhile()(y >= col, neg=True):
        def _t2():
            y.__iadd__(1)
        # (Line 86) for (var x = 0; x < row; x++) {
        x = EUDVariable()
        x << (0)
        if EUDWhile()(x >= row, neg=True):
            def _t4():
                x.__iadd__(1)
            # (Line 87) const tile = Map[x + y *row];
            tile = Map[x + y * row]
            # (Line 88) var style;
            style = EUDVariable()
            # (Line 89) if 		(tile == 0) style = -1;		 // 바깥
            if EUDIf()(tile == 0):
                style << (-1)
                # (Line 90) else if (tile == 1) style = 220;		// 안	1== Unitid_wall
            if EUDElseIf()(tile == 1):
                style << (220)
                # (Line 91) else 				style = 221;		// 벽
            if EUDElse()():
                style << (221)
                # (Line 92) fill(x, y, style);
            EUDEndIf()
            f_fill(x, y, style)
            # (Line 93) }
            # (Line 94) }
            EUDSetContinuePoint()
            _t4()
        EUDEndWhile()
        # (Line 95) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 97) function fill(x, y, style) {

@EUDFunc
def f_fill(x, y, style):
    # (Line 98) if(style == -1) return;
    if EUDIf()(style == -1):
        EUDReturn()
        # (Line 99) const x2, y2 = GetTileXY(x, y);
    EUDEndIf()
    x2, y2 = List2Assignable([GetTileXY(x, y)])
    # (Line 100) Helpers.EUDSetLocation(fillLoc, x2, y2);
    Helpers.EUDSetLocation(fillLoc, x2, y2)
    # (Line 101) CreateUnit(1, style, fillLoc + 1, Computer);
    DoActions(CreateUnit(1, style, fillLoc + 1, Computer))
    # (Line 102) }
    # (Line 104) function ClearMap()

# (Line 105) {
@EUDFunc
def ClearMap():
    # (Line 106) RemoveUnit('(any unit)', Computer);
    DoActions(RemoveUnit('(any unit)', Computer))
    # (Line 107) RemoveUnit('(any unit)', $Force1);
    DoActions(RemoveUnit('(any unit)', 18))
    # (Line 108) }
