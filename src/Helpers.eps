// Header -----------------------------
const Computer					= $P8;
const UnitID_Player				= [15, 3, 5];
const UnitID_Bomb				= $U('Zerg Egg');
const UnitID_Fire				= $U('Zerg Scourge');
const UnitID_Wall				= 1;	// Terrain
const UnitID_Box				= 2;	// Breakable
const DeadBox					= -1;

const scale						= 32;   // tile

const Item_rangeUp				= 128;
const Item_speedUp				= 215;
const Item_bombNUp				= 218;
const Item_rangeMax				= 219;
const Item_rideTank				= 217;
const Item_rideHide				= 216;

const ItemList					= [Item_rangeUp, 
								Item_speedUp, 
								Item_bombNUp, 
								Item_rangeMax,
								Item_rideTank, 
								Item_rideHide];

// Math --------------------------------
function GetRandom(low, high) {
	return (rand() % (high - low)) + low;
}

function min(a, b) {
	if(a > b) return b;
	else return a;
}

function abs(x) {
	if(x >= 0x80000000) {
		x = -x;
	}
	return x;
}


// EUD --------------------------------
function GetDeath(player, unit)
{
	for(var i=0; i<50; i++)
		if(Deaths(player, Exactly, i, unit))
			return i;
}

function EUDSetLocation(locID, x, y) 
{
	const locscale = 15;
	dwwrite_epd(EPD(0x58DC60) + 5 * locID + 0, x - locscale);
	dwwrite_epd(EPD(0x58DC60) + 5 * locID + 1, y - locscale);
	dwwrite_epd(EPD(0x58DC60) + 5 * locID + 2, x + locscale);
	dwwrite_epd(EPD(0x58DC60) + 5 * locID + 3, y + locscale);
}

function EUDGetLocation(locID)
{
	const l = dwread_epd(EPD(0x58DC60) + 5 * locID + 0);
	const u = dwread_epd(EPD(0x58DC60) + 5 * locID + 1);
	const r = dwread_epd(EPD(0x58DC60) + 5 * locID + 2);
	const d = dwread_epd(EPD(0x58DC60) + 5 * locID + 3);

	return (l+r)/2, (u+d)/2;
}

function setpcolor(pnum, color) 
{
	const pcolor_dst = 0x581D76 + 8 * pnum;
	const mcolor_dst = 0x581DD6 + pnum;
	bwrite(pcolor_dst, color);
	bwrite(mcolor_dst, color);
}

function SetOrderTo(unitEpd, orderID)
{
	const player = dwbreak(dwread_epd(unitEpd + 0x4C / 4))[[2]];
	SetMemoryEPD(unitEpd + 0x4C / 4, SetTo, player + orderID * 256);
}

function IsOrder(unitEpd, orderID)
{
	const order = dwbreak(dwread_epd(unitEpd + 0x4C / 4))[[3]];
	if(order == orderID)
		return 1;
	else
		return 0;

}

function GetBuildQueue1(unitEpd)
{
	const BuildQueueList = dwread_epd(unitEpd + 0x98 /4); //대기열
	const BuildQueue1 = dwbreak(BuildQueueList)[[0]]; //1번대기열

	return BuildQueue1;
}

function ResetBuildQueue(unitEpd)
{
	// 대기열, 대기열 인덱스 초기화
	dwwrite_epd(unitEpd + 0xA4 /4, 1507584);
	dwwrite_epd(unitEpd + 0x98 /4, 14942436); // Q12
	dwwrite_epd(unitEpd + 0x9C /4, 14942436); // Q34
	//dwwrite_epd(unitEpd + 0xA0 /4, 14942436); // Q5+energy
}

function SetBuildQueue1(unitEpd, unitNumber)
{
	//buildQueue[0] = 
	SetMemoryEPD(unitEpd + 0x98/4, SetTo, unitNumber +14942208);
}
