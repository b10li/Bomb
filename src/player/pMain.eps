import util.Header;
import util.EUDTrig;
import map.Mapper;
import player.Unit;
import player.Bomb;
import player.Control;

const scale						= Mapper.scale;

const Computer		 			= Header.Computer;
const UnitID_Civilian 			= Header.UnitID_Player[0];
const UnitID_Tank 				= Header.UnitID_Player[2];
const UnitID_Goliath 			= Header.UnitID_Player[1];
const UnitID_Bomb				= Header.UnitID_Bomb;
const UnitID_Fire				= Header.UnitID_Fire;

const ItemList					= Header.ItemList;
const Item_rangeUp				= Header.Item_rangeUp;
const Item_speedUp				= Header.Item_speedUp;
const Item_bombNUp				= Header.Item_bombNUp;
const Item_rangeMax				= Header.Item_rangeMax;
const Item_rideTank				= Header.Item_rideTank;
const Item_rideHide				= Header.Item_rideHide;

const MaxRange					= 5;
const MaxBomb					= 8;
const PlayerSpeed				= EUDArray(6);

const loc0 		= $L('loc0');
const loc 		= $L('loc');
const loc_p1 	= $L('p1');
const loc_p2 	= $L('p2');
const loc_p3 	= $L('p3');
const loc_p4 	= $L('p4');
const loc_p5 	= $L('p5');
const loc_p6 	= $L('p6');

const loclist	= [loc_p1, loc_p2, loc_p3, loc_p4, loc_p5, loc_p6];
const locBC		= $L('BC');

function setRangeAtBomb(unitEpd, range);
function getRangeAtBomb(unitEpd);
function setBombTimer(unitEpd, time);
function getCurrentBN(player);
function getBombNumber(player);
function getBombRange(player);
function setBombNumber(player, number);
function setBombRange(player, number);
function getItem(player);
//--------------------------------------------------------

function InitPlayerLocation(player)
{
	var x, y;
	if(player == 0) { x=1; 	y=1; }
	if(player == 1) { x=18; y=1; }
	if(player == 2) { x=1; 	y=9; }
	if(player == 3) { x=18; y=9; }
	if(player == 4) { x=1; 	y=5; }
	if(player == 5) { x=18; y=5; }

	const x2, y2 = Mapper.getTileXY(x, y);
	EUDTrig.EUDMoveLocation(loclist[player], x2, y2);
}
function InitPlayer(player)
{
	Unit.setPlayerEpd(player);
	InitPlayerLocation(player);
	CreateUnitWithProperties(1, UnitID_Civilian, loclist[player]+1, player, UnitProperty(invincible = true));
	setBombNumber(player, 1);
	setBombRange(player, 1);
	PlayerSpeed[player] = 1000;
	if(EUDTrig.getDeath(player, 216) == 0)
	{
		SetDeaths(player, SetTo, 1, 216);
	}
}
function FollowLocation(player)
{
	if(Command(player, AtLeast, 1, UnitID_Civilian))
		MoveLocation(loclist[player] +1, UnitID_Civilian, player, '20x13');
	if(Command(player, AtLeast, 1, UnitID_Tank))
		MoveLocation(loclist[player] +1, UnitID_Tank, player, '20x13');
	if(Command(player, AtLeast, 1, UnitID_Goliath))
		MoveLocation(loclist[player] +1, UnitID_Goliath, player, '20x13');
}
function ItemCollect(player)
{
	const item = getItem(player);
	if(item != 0)
		RemoveUnitAt(1, item, loclist[player]+1, Computer);
}

function PlaceBomb(unitEpd)
{
	const player = EUDTrig.getPlayerID(unitEpd);
	// 키인식
	if(Control.KeyRecog(player))
	{
		if(getBombNumber(player) > getCurrentBN(player))
		{// 폭탄 갯수
			const x, y = Mapper.getTileIndex(unitEpd);
			const x2, y2 = Mapper.getTileXY(x, y);
			EUDTrig.EUDMoveLocation(loc, x2, y2);

			if(Bring(player, AtLeast, 1, UnitID_Bomb, locBC +1))
				return;
			if(Mapper.getMapXY(x,y) == 0)
			{// 빈공간
				const unitEpd = epdread_epd(EPD(0x628438));
				CreateUnitWithProperties(1, UnitID_Bomb, locBC +1, player, UnitProperty(invincible = true));
				EUDTrig.setCollision(unitEpd, 0); // no collision on bomb
				MoveUnit(1, UnitID_Bomb, player, locBC +1, loc+1);

				Bomb.NewBomb(unitEpd); // Mark at map
				setBombTimer(unitEpd, 10); // bomb timer
				setRangeAtBomb(unitEpd, getBombRange(player)); // Mark bomb range inside bom
				PlayWAV("sound\\glue\\mouseover.wav");
			}
		}	
	}
}


function getItem(player)
{
	for(var i=0; i<6; i++)
	{
		const item = ItemList[i];
		if(Bring(Computer, AtLeast, 1, item, loclist[player]+1))
		{
			// Range +
			if(item == Item_rangeUp)
			{
				const bombRange = getBombRange(player);
				if(bombRange < MaxRange)
				{
					DisplayText("\x07[ Range + ]");
					setBombRange(player, bombRange+1);
					return item;
				}
				return 0;
			}
			// Speed +
			if(item == Item_speedUp)
			{
				if(MemoryEPD(Unit.PlayerEpd[player] + 0x034 /4, AtMost, 1900) || PlayerSpeed[player] > 1900)
				{
					DisplayText("\x07[ Speed + ]");
					SetMemoryEPD(Unit.PlayerEpd[player] + 0x034 /4, Add, 100);
					PlayerSpeed[player] = PlayerSpeed[player] + 100;
					return item;
				}
				return 0;
			}	
			// Bomb +
			if(item == Item_bombNUp)
			{
				const bombNumber = getBombNumber(player);
				if(bombNumber < MaxBomb)
				{
					DisplayText("\x07[ Bomb + ]");
					setBombNumber(player, bombNumber+1);
					return item;
				}
				return 0;
			}
			// Range +
			if(item == Item_rangeMax)
			{
				const bombRange = getBombRange(player);
				if(bombRange < MaxRange)
				{
					DisplayText("\x07[ Range + ]");
					setBombRange(player, bombRange+1);
					return item;
				}
				return 0;
			}

			if(item == Item_rideTank)
			{
				if(Command(player, Exactly, 1, UnitID_Civilian))
				{
					PlayerSpeed[player] = dwread_epd(Unit.PlayerEpd[player] + 0x034 /4);
					Unit.setPlayerEpd(player);
					const chance = EUDTrig.getRandom(0,2);
					if(chance == 1)
					{// tank
						CreateUnitWithProperties(1, UnitID_Tank, loclist[player]+1, player, UnitProperty(invincible = true));
						SetDeaths(player, SetTo, 1, UnitID_Tank);
					} else
					{// goliath
						CreateUnitWithProperties(1, UnitID_Goliath, loclist[player]+1, player, UnitProperty(invincible = true));
						SetDeaths(player, SetTo, 1, UnitID_Goliath);
					}
					RemoveUnit(UnitID_Civilian, player);
					return item;
				}
				return 0;

			}
			if(item == Item_rideHide)
			{
				if(1)
				{
					//const unitEpd = Unit.PlayerEpd[player];
					//const statusFlag = dwread_epd(unitEpd + 0x0DC/4);
					//SetMemoryEPD(unitEpd + 0x0DC/4, SetTo, statusFlag | 0x200);
					DisplayText("\x07똥을 밟았다.");
					return item;
				}
				return 0;
				
			}
		}
	}
}

function OffRide(player)
{
	if(Command(player, Exactly, 0, UnitID_Civilian) 
		&& Command(player, Exactly, 0, UnitID_Tank) 
		&& Command(player, Exactly, 0, UnitID_Goliath))
	{
		if(!Deaths(player, Exactly, 0, UnitID_Tank) || !Deaths(player, Exactly, 0, UnitID_Goliath))
		{
			if(Bomb.boom == 0)
			{
				Unit.setPlayerEpd(player);
				CreateUnitWithProperties(1, UnitID_Civilian, loclist[player]+1, player, UnitProperty(invincible = true));
				RemoveUnit(UnitID_Tank, player);
				RemoveUnit(UnitID_Goliath, player);
				SetMemoryEPD(Unit.PlayerEpd[player] + 0x034 /4, SetTo, PlayerSpeed[player]);
				SetDeaths(player, SetTo, 0, UnitID_Tank);
				SetDeaths(player, SetTo, 0, UnitID_Goliath);
			}
		}
	}
}


function getBombRange(player)
{//gas
	return dwread_epd(EPD(0x57F120) + player);
}
function setBombRange(player, number)
{
	SetResources(player, SetTo, number, Gas);
}
function getCurrentBN(player)
{
	for(var i = 0; i<12; i++)
		if(Command(player, Exactly, i, UnitID_Bomb))
			return i;
	//return dwread_epd(EPD(0x582324) + player*228 + UnitID_Bomb);
}

function getBombNumber(player)
{// ore
	return dwread_epd(EPD(0x57F0F0) + player);
}
function setBombNumber(player, number)
{
	SetResources(player, SetTo, number, Ore);
}

function setRangeAtBomb(unitEpd, range)
{//union offset(space for rally & psi)
	dwwrite_epd(unitEpd + 0xFC/4, range);
}

function setBombTimer(unitEpd, time)
{
	SetMemoryEPD(unitEpd + 0x114/4, SetTo, time);
}